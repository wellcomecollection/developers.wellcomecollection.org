openapi: 3.1.0
info:
  title: Content
  description: Search our non-catalogue content
  version: v0
  contact: {}
servers:
  - url: 'https://api.wellcomecollection.org/content/v0'
paths:
  /articles:
    get:
      tags:
        - Articles
      summary: /articles
      description: Returns a paginated list of articles
      operationId: getArticles
      parameters:
        - name: aggregations
          in: query
          description: What aggregated data in relation to the results should we return.
          schema:
            type: string
            enum:
              - format
              - contributors.contributor
        - name: format
          in: query
          description: Filter the articles by format.
          schema:
            type: string
        - name: contributors.contributor
          in: query
          description: Filter the articles by contributor.
        - name: sort
          in: query
          description: Which field to sort the results on
          schema:
            type: string
            enum:
              - productionDate
              - relevance
        - name: sortOrder
          in: query
          description: The order that the results should be returned in.
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: publicationDate.to
          in: query
          description: |-
            Return all articles with a publication date before and including this date.

            Can be used in conjunction with `publicationDate.from` to create a range.
          schema:
            type: string
            format: date-time
        - name: publicationDate.from
          in: query
          description: |-
            Return all articles with a publication date after and including this date.

            Can be used in conjunction with `publicationDate.to` to create a range.
          schema:
            type: string
            format: date-time
        - name: query
          in: query
          description: 'Full-text search query'
          schema:
            type: string
        - name: page
          in: query
          description: The page to return from the result list
          schema:
            minimum: 1
            type: integer
            format: int64
            default: 1
        - name: pageSize
          in: query
          description: The number of articles to return per page
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int64
            default: 10
      responses:
        "200":
          description: The articles
          content:
            "*/*":
              schema:
                $ref: "../schemas/lists/article-list.yaml#/ArticleResultList"
        $ref: "../schemas/responses/errors.yaml#/Errors"
  "/articles/{id}":
    get:
      tags:
        - Articles
      summary: "/articles/{id}"
      description: Returns a single article
      operationId: getArticle
      parameters:
        - name: id
          in: path
          description: The article to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The article
          content:
            "*/*":
              schema:
                $ref: "../schemas/docs/article.yaml#/Article"
        $ref: "../schemas/responses/errors.yaml#/Errors"
  /events:
    get:
      tags:
        - Events
      summary: /events
      description: Returns a paginated list of events
      operationId: getEvents
      parameters:
        - name: aggregations
          in: query
          description: What aggregated data in relation to the results should we return.
          schema:
            type: string
            enum:
              - audience
              - interpretation
              - format
              - isAvailableOnline
              - location
        - name: audience
          in: query
          description: Filter the events by audience.
          schema:
            type: string
        - name: interpretation
          in: query
          description: Filter the events by interpretation.
          schema:
            type: string
        - name: format
          in: query
          description: Filter the events by format.
          schema:
            type: string
        - name: isAvailableOnline
          in: query
          description: Filter the events by catch-up events.
          schema:
            type: string
            enum:
              - true
        - name: location
          in: query
          description: Filter the articles by location.
          schema:
            type: string
        - name: sort
          in: query
          description: Which field to sort the results on
          schema:
            type: string
            enum:
              - times.startDateTime
              - relevance
        - name: sortOrder
          in: query
          description: The order that the results should be returned in.
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: query
          in: query
          description: "Full-text search query"
          schema:
            type: string
        - name: page
          in: query
          description: The page to return from the result list
          schema:
            minimum: 1
            type: integer
            format: int64
            default: 1
        - name: pageSize
          in: query
          description: The number of events to return per page
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int64
            default: 10
      responses:
        "200":
          description: The events
          content:
            "*/*":
              schema:
                $ref: "../schemas/lists/event-list.yaml#/EventResultList"
        $ref: "../schemas/responses/errors.yaml#/Errors"
  "/events/{id}":
    get:
      tags:
        - Events
      summary: "/events/{id}"
      description: Returns a single event
      operationId: getEvent
      parameters:
        - name: id
          in: path
          description: The event to return
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The event
          content:
            "*/*":
              schema:
                $ref: "../schemas/docs/event.yaml#/Event"
        $ref: "../schemas/responses/errors.yaml#/Errors"
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
tags:
  - name: Articles
  - name: Events
