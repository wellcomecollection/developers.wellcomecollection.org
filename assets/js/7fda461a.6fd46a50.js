"use strict";(self.webpackChunkdevelopers=self.webpackChunkdevelopers||[]).push([[499],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>c});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=o,f=u["".concat(l,".").concat(c)]||u[c]||d[c]||r;return n?a.createElement(f,i(i({ref:t},h),{},{components:n})):a.createElement(f,i({ref:t},h))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8017:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));n(8209);const r={},i="5. Working with snapshots of the API",s={unversionedId:"examples/working-with-snapshots-of-the-api",id:"examples/working-with-snapshots-of-the-api",title:"5. Working with snapshots of the API",description:"View on GitHub | Run in Google Colab",source:"@site/docs/examples/05-working-with-snapshots-of-the-api.md",sourceDirName:"examples",slug:"/examples/working-with-snapshots-of-the-api",permalink:"/docs/examples/working-with-snapshots-of-the-api",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"4. Building graphs of visually similar images",permalink:"/docs/examples/building-graphs-of-visually-similar-images"},next:{title:"6. Visualising the collections on a map",permalink:"/docs/examples/visualising-the-collection-on-a-map"}},l={},p=[{value:"Wrapping up",id:"wrapping-up",level:2},{value:"Exercises",id:"exercises",level:2}],h={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"5-working-with-snapshots-of-the-api"},"5. Working with snapshots of the API"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/wellcomecollection/developers.wellcomecollection.org/tree/HEAD/notebooks/05-working-with-snapshots-of-the-api.ipynb"},"View on GitHub")," | ",(0,o.kt)("a",{parentName:"p",href:"https://colab.research.google.com/github/wellcomecollection/developers.wellcomecollection.org/tree/HEAD/notebooks/05-working-with-snapshots-of-the-api.ipynb"},"Run in Google Colab")),(0,o.kt)("p",null,"As we saw at the end of the last notebook, the API limits its responses to 10,000 total results - after that point, users are directed to work with the snapshots. For example, making a request to ",(0,o.kt)("a",{parentName:"p",href:"https://api.wellcomecollection.org/catalogue/v2/works?pageSize=100&page=101"},"https://api.wellcomecollection.org/catalogue/v2/works?pageSize=100&page=101")," gives us:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "errorType": "http",\n    "httpStatus": 400,\n    "label": "Bad Request",\n    "description": "Only the first 10000 works are available in the API. If you want more works, you can download a snapshot of the complete catalogue: https://developers.wellcomecollection.org/docs/datasets",\n    "type": "Error"\n}\n')),(0,o.kt)("p",null,"Let's download a snapshot and see what it contains. In later notebooks, we'll make use of the file we're downloading here."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"NB: The uncompressed snapshot is >10GB, so this will take a while to download! Make sure your machine has enough space before running this notebook.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import requests\nimport json\nfrom pathlib import Path\nfrom tqdm.auto import tqdm\nimport gzip\nimport io\n")),(0,o.kt)("p",null,"The urls for the snapshots can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://developers.wellcomecollection.org/docs/datasets"},"https://developers.wellcomecollection.org/docs/datasets"),". We're going to work with the ",(0,o.kt)("inlineCode",{parentName:"p"},"works")," snapshot, but all of the logic which follows should be extendable to the images snapshot on that page too!"),(0,o.kt)("p",null,"Let's start by establishing the url for the compressed snapshot file, and the path where the data is going to be saved."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'snapshot_url = "https://data.wellcomecollection.org/catalogue/v2/works.json.gz"\n')),(0,o.kt)("p",null,"Note that the URL ends with ",(0,o.kt)("inlineCode",{parentName:"p"},".gz"),", indicating that we're going to be downloading a ",(0,o.kt)("em",{parentName:"p"},"zipped")," version of the file, which will need to be unzipped later."),(0,o.kt)("p",null,"We're going to create a new directory next to these notebooks called ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),", where the zipped file will be saved."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'data_dir = Path("./data").resolve()\ndata_dir.mkdir(exist_ok=True)\n\nfile_name = Path(snapshot_url).parts[-1]\nzipped_path = data_dir / file_name\n')),(0,o.kt)("p",null,"Let's download the file using the ",(0,o.kt)("inlineCode",{parentName:"p"},"requests")," library, and save it to the path we've just created."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# check whether the file already exists before doing any work\nif not zipped_path.exists():\n\n    # make a request to the snapshot URL and stream the response\n    r = requests.get(snapshot_url, stream=True)\n    \n    # use the length of the response to create a progress bar for the download\n    download_progress_bar = tqdm(\n        unit="bytes",\n        total=int(r.headers["Content-Length"]),\n        desc=f"Downloading {file_name}",\n    )\n\n    # write the streamed response to our file in chunks of 1024 bytes\n    with open(zipped_path, "wb") as f:\n        for chunk in r.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n                download_progress_bar.update(len(chunk))\n\n        download_progress_bar.close()\n\n')),(0,o.kt)("p",null,"Now that we have the zipped file, we can create a path for the ",(0,o.kt)("em",{parentName:"p"},"unzipped")," data to be saved, and use the ",(0,o.kt)("inlineCode",{parentName:"p"},"gzip")," library to unzip the data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'unzipped_path = zipped_path.with_suffix("")\n\n# open the zipped file, and the unzipped file\nwith gzip.open(zipped_path, "rb") as f_in, open(unzipped_path, "wb") as f_out:\n    # measure the length of the zipped file using `.seek()`\n    file_length = f_in.seek(0, io.SEEK_END)\n    unzip_progress_bar = tqdm(\n        unit="bytes",\n        total=file_length,\n        desc=f"unzipping {file_name}",\n    )\n\n    # we used `.seek()` to move the cursor to the end of the file, so we need to\n    # move it back to the start before we can read the whole thing file\n    f_in.seek(0)\n\n    # read the zipped file in chunks of 1MB\n    for chunk in iter(lambda: f_in.read(1024 * 1024), b""):\n        f_out.write(chunk)\n        unzip_progress_bar.update(len(chunk))\n\n    unzip_progress_bar.close()\n')),(0,o.kt)("p",null,"Great! We've now got a copy of the works snapshot, and we're ready to start exploring it!"),(0,o.kt)("p",null,"The snapshot is saved in ",(0,o.kt)("a",{parentName:"p",href:"http://jsonlines.org/"},"jsonl")," format; a variant of json where each line is a separate json object. This is a common format for large json files, as it allows the user to read the file line-by-line, rather than having to load the entire file into memory."),(0,o.kt)("p",null,"Let's have a look at the first line of the file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"with gzip.open(zipped_path, 'rt') as f:\n    first_line = f.readline()\n\nprint(first_line)\n")),(0,o.kt)("p",null,"That first line is a standalone json document - we can parse it using the ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," library and play around with the keys and values, just as we did with the API responses."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"work = json.loads(first_line)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"work.keys()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'work["title"]\n')),(0,o.kt)("p",null,"You'll notice that the works in the snapshot include ",(0,o.kt)("em",{parentName:"p"},"all")," of the fields which were available in the default API response, ",(0,o.kt)("em",{parentName:"p"},"and")," all of the optional fields too. The snapshots include the complete set of information we have about our works, and are a great way to get a complete picture of the collection."),(0,o.kt)("h2",{id:"wrapping-up"},"Wrapping up"),(0,o.kt)("p",null,"Let's delete the snapshot we've downloaded, and wrap up all of the logic we've established so far into a single cell which we can copy and reuse in later notebooks."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"unzipped_path.unlink()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'snapshot_url = "https://data.wellcomecollection.org/catalogue/v2/works.json.gz"\n\ndata_dir = Path("./data").resolve()\ndata_dir.mkdir(exist_ok=True)\n\nfile_name = Path(snapshot_url).parts[-1]\nzipped_path = data_dir / file_name\nunzipped_path = zipped_path.with_suffix("")\n\nif not unzipped_path.exists():\n    if not zipped_path.exists():\n        r = requests.get(snapshot_url, stream=True)\n        download_progress_bar = tqdm(\n            unit="B",\n            total=int(r.headers["Content-Length"]),\n            desc=f"downloading {file_name}",\n        )\n        with open(zipped_path, "wb") as f:\n            for chunk in r.iter_content(chunk_size=1024):\n                if chunk:\n                    f.write(chunk)\n                    download_progress_bar.update(len(chunk))\n        download_progress_bar.close()\n        \n    with gzip.open(zipped_path, "rb") as f_in, open(unzipped_path, "wb") as f_out:\n        unzip_progress_bar = tqdm(\n            unit="B",\n            total=f_in.seek(0, io.SEEK_END),\n            desc=f"unzipping {file_name}",\n        )\n        f_in.seek(0)\n        for chunk in iter(lambda: f_in.read(1024 * 1024), b""):\n            f_out.write(chunk)\n            unzip_progress_bar.update(len(chunk))\n    \n        unzip_progress_bar.close()\n    zipped_path.unlink()\n')),(0,o.kt)("h2",{id:"exercises"},"Exercises"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Count how many lines exist in the file, without loading the entire file into memory."),(0,o.kt)("li",{parentName:"ol"},"Load the first 10 lines of the file into memory, and print them out."),(0,o.kt)("li",{parentName:"ol"},"Adapt the code to download the images snapshot instead, and repeat the exercises above.")))}d.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);